package com.hackerrank.api.controller;

import com.fasterxml.jackson.databind.ObjectMapper;
import com.hackerrank.api.model.Vulnerability;
import com.hackerrank.api.repository.VulnerabilityRepository;
import com.hackerrank.api.service.VulnerabilityService;
import com.hackerrank.api.service.impl.DefaultVulnerabilityService;

import lombok.Builder;

import static org.hamcrest.Matchers.greaterThan;
import org.junit.Assert;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.extension.ExtendWith;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.boot.test.autoconfigure.web.servlet.AutoConfigureMockMvc;
import org.springframework.boot.test.autoconfigure.web.servlet.WebMvcTest;
import org.springframework.boot.test.context.SpringBootTest;
import org.springframework.boot.test.mock.mockito.MockBean;
import org.springframework.test.context.jdbc.Sql;
import org.springframework.test.context.junit.jupiter.SpringExtension;
import org.springframework.test.web.servlet.MockMvc;
import static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.post;
import static org.springframework.test.web.servlet.result.MockMvcResultHandlers.print;
import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.jsonPath;
import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.status;
import static org.springframework.test.web.servlet.request.MockHttpServletRequestBuilder.*;
import java.util.Optional;

@ExtendWith(SpringExtension.class)
@Builder
@SpringBootTest(webEnvironment = SpringBootTest.WebEnvironment.DEFINED_PORT)
@AutoConfigureMockMvc
@Sql(executionPhase = Sql.ExecutionPhase.BEFORE_TEST_METHOD, scripts = "classpath:data.sql")
@WebMvcTest(value =DefaultVulnerabilityService.class)
class VulnerabilityControllerTest {
  @Autowired
  private MockMvc mockMvc;

  /*ObjectMapper om = new ObjectMapper();

  @Autowired
  private VulnerabilityRepository repository;

 @Test
  public void testCreation() throws Exception {
    Vulnerability expectedRecord = Vulnerability.builder.product("Java").build();
    Vulnerability actualRecord = om.readValue(mockMvc.perform(post("/vulnerability")
            .contentType("application/json")
            .content(om.writeValueAsString(expectedRecord)))
            .andDo(print())
            .andExpect(jsonPath("$.id", greaterThan(0)))
            .andExpect(status().isCreated()).andReturn().getResponse().getContentAsString(), Vulnerability.class);

    Assert.assertEquals(( expectedRecord).getProduct(), (( actualRecord).getProduct());
  }*/
  @MockBean
	private VulnerabilityRepository repo;
	
	@Test
	public void testgetAllVulnerability() {
		repo.findAll();
	}
	@Test
	public void testgetVulnerabilityById() {
		long id=2;
		repo.findById(id);
		
		
	}
	@Test
	public void testcreateNewVulnerability() {
		Vulnerability v =new Vulnerability(12,"Vulnerability","200","tv");
		repo.save(v);
		
		
	}
	@Test
	public void testdeleteById() {
		long id=2;
		repo.deleteById(id);
		
		
	}
  
  
  

  //TODO: write at least 5 tests to get full score
}
